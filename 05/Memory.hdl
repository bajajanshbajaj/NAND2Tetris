/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in= address[14], out= below16k);
    And(a= below16k, b=load , out= below16kANDload);
    RAM16K(in= in, load=below16kANDload , address= address[0..13], out= RAM);

    And(a= address[14], b= load, out= above16kANDload);
    Screen(in= in , load=above16kANDload , address= address[0..12], out=SCREEN );
    Keyboard(out=KEYBOARD );
    Mux16(a= RAM, b= SCREEN, sel=address[14] , out= RAMSCREEN);

    And(a= address[14], b=address[13] , out= isKEYBOARD);
    Mux16(a= RAMSCREEN, b= KEYBOARD, sel=isKEYBOARD , out= out);

    
	//// Replace this comment with your code.
}
